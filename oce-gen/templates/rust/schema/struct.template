use serde::Deserialize;
use rust_decimal::Decimal;

#[derive(Deserialize, Default)]
#[serde(default)]
pub struct {{ name }} {
{%- for field in fields -%}
    {%- let kind -%}
    {%- match field.value %}
    {%- when StructValue::Str with (s) -%}
        {%- let kind = "String" -%}
    {%- when StructValue::Bool with (b) -%}
        {%- let kind = "bool" -%}
    {%- when StructValue::Decimal with (d) -%}
        {%- let kind = "Decimal" -%}
    {%- when StructValue::VectorOfDecimal with (vd) -%}
        {%- let kind = "Vec<Decimal>" -%}
    {%- endmatch -%}

    {%- let description-%}
    {%- if field.description.len() != 0 -%}
    {%- let description = field.description.clone() -%}
    {%- else -%}
    {%- let description = "no description".to_string() -%}
    {%- endif -%}

    {%- if field.is_optional %}
    // {{ description }}
    // example value: {{ field.value.to_string() }}
    #[serde(rename = "{{ field.org_name }}")]
    #[serde(deserialize_with = "crate::schema::deserialize_null_default")]
    pub r#{{ field.name }}: Option<{{ kind }}>,
    {%- else %}
    // {{ description }}
    // example value: {{ field.value.to_string() }}
    #[serde(rename = "{{ field.org_name }}")]
    #[serde(deserialize_with = "crate::schema::deserialize_null_default")]
    pub r#{{ field.name }}: {{ kind }},
    {% endif -%}
{%- endfor -%}
}
